#!/usr/bin/env bash
#
# This file is part of Pearl (https://github.com/fsquillace/pearl).
#
# Copyright (c) 2008-2016
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

NAME='Pearl'
CMD='pearl'
DESCRIPTION='The enhanced Bash shell framework'
AUTHOR='Filippo Squillace <feel dot sqoox at gmail.com>'
HOMEPAGE='https://github.com/fsquillace/pearl'
COPYRIGHT='2008-2016'
PEARL_ROOT="$(dirname $0)/.."

source "${PEARL_ROOT}/lib/utils.sh"
source "${PEARL_ROOT}/lib/core/system.sh"
source "${PEARL_ROOT}/lib/core/module.sh"


###################################
### General functions           ###
###################################

usage() {
    echo -e "$NAME: $DESCRIPTION"
    echo -e "Usage: $CMD [options] [session] [command]"
    echo -e "Sessions:"
    echo -e "  module                   Session for $NAME module settings"
    echo -e "    Commands:"
    echo -e "      list                 List the available $NAME modules"
    echo -e "      install [module]     Install a specific module"
    echo -e "      update [module]      Update a specific module"
    echo -e "      uninstall [module]   Uninstall a specific module"
	echo
    echo -e "  system                   Session for $NAME system settings"
    echo -e "    Commands:"
    echo -e "      install              Install $NAME"
    echo -e "      update               Update $NAME and its modules"
    echo -e "      uninstall            Uninstall $NAME"
	echo
    echo -e "Options:"
    echo -e "  -h, --help               Show this help message"
}

check_cli(){
    if $OPT_HELP
    then
        if $COMMAND_SYSTEM_UNINSTALL || $COMMAND_MODULE_LIST || $COMMAND_MODULE_INSTALL || \
			$COMMAND_MODULE_UPDATE || $COMMAND_SYSTEM_INSTALL || $COMMAND_SYSTEM_UPDATE || \
			$COMMAND_SYSTEM_UNINSTALL
        then
            die "The help option must be used exclusively"
        fi
    fi
    if [ "$ARGS" != "" ]
    then
        die "No arguments are needed. For the CLI syntax run: $CMD --help"
    fi

    return 0
}


function parse_arguments(){
    COMMAND_MODULE_LIST=false
    COMMAND_MODULE_INSTALL=false
    COMMAND_MODULE_UPDATE=false
    COMMAND_MODULE_UNINSTALL=false
    COMMAND_SYSTEM_INSTALL=false
    COMMAND_SYSTEM_UPDATE=false
    COMMAND_SYSTEM_UNINSTALL=false
	COMMAND_ARGS=()
	OPT_HELP=false

	for opt in "$@"
	do
		case "$1" in
			module)
				shift
				case "$1" in
					list)
						COMMAND_MODULE_LIST=true; shift ;;
					install)
						COMMAND_MODULE_INSTALL=true; shift ; COMMAND_ARGS=("$@") ; shift ${#} ;;
					update)
						COMMAND_MODULE_UPDATE=true; shift ; COMMAND_ARGS=("$@") ; shift ${#} ;;
					uninstall)
						COMMAND_MODULE_UNINSTALL=true; shift ; COMMAND_ARGS=("$@") ; shift ${#} ;;
				esac
				;;

			system)
				shift
				case "$1" in
					install)
						COMMAND_SYSTEM_INSTALL=true; shift ;;
					update)
						COMMAND_SYSTEM_UPDATE=true; shift ;;
					uninstall)
						COMMAND_SYSTEM_UNINSTALL=true; shift ;;
				esac
				;;
						
			-h|--help) OPT_HELP=true ; shift ;;

			--) shift ; break ;;
			-*) die "Invalid option $1" ;;
			*) break ;;
		esac
	done

	ARGS=()
	for arg in "$@"
	do
		ARGS+=("$arg")
	done
}

function execute_operation(){
	$OPT_HELP && usage && return

	$COMMAND_MODULE_LIST && pearl_module_list && return

	if $COMMAND_MODULE_INSTALL; then
		for module in ${COMMAND_ARGS[@]}
		do
		    pearl_module_install "$module"
		done
	elif $COMMAND_MODULE_UPDATE; then
		for module in ${COMMAND_ARGS[@]}
		do
		    pearl_module_update "$module"
		done
	elif $COMMAND_MODULE_UNINSTALL; then
		for module in ${COMMAND_ARGS[@]}
		do
		    pearl_module_uninstall "$module"
		done
	elif $COMMAND_SYSTEM_INSTALL; then
		pearl_install ${PEARL_ROOT}
	elif $COMMAND_SYSTEM_UPDATE; then
		pearl_update
	elif $COMMAND_SYSTEM_UNINSTALL; then
		pearl_uninstall
	fi

	source_pearl
}

function source_pearl(){
	# Send signal to parent in order to (re)source pearl
    [ -z "$PEARL_ROOT" ] || kill -USR1 $PPID
}

parse_arguments "$@"
check_cli
execute_operation
# vim: set ts=4 sw=4 noet:
