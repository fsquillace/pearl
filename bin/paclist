#!/usr/bin/python
#
# Author: Filippo Squillace <sqoox85@gmail.com>
#
# Copyright 2010
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

'''Show the list of the packages in an ArchLinux system ordered by
dimension size o Installed date.
'''
__author__ = 'Filippo Squillace'
__date__ = '12/05/2011'
__license__   = 'GPL v3'
__copyright__ = '2011'
__docformat__ = 'restructuredtext en'
__version__ = "0.1.6"

import time
import subprocess
from util.io import debug
from optparse import OptionParser

if __name__ == '__main__':
    usage = "%prog [option]\n" + \
          "Show the packages installed by pacman and "+\
          "sorted by size or install date."

    parser = OptionParser(usage=usage)
    parser.add_option("-e","--explicit", \
            default=False,dest="explicit", action="store_true",\
            help="List only the explicit packages.")
    parser.add_option("-s","--size", \
            default=False,dest="size", action="store_true",\
            help="The packages are sorted by their size.")
    parser.add_option("-d","--date", \
            default=False,dest="date", action="store_true",\
            help="The packages are sorted by their installed date.")
 

    options, args = parser.parse_args() # by default it takes sys.argv[1:]

    debug('Options: '+str(options))
    debug('Args: '+str(args))

    if options.size and options.date:
        parser.error('You can\'t specifiy both options.')

    if options.explicit:
        opts = '-Qeqi'
    else:
        opts = '-Qqi'

    (st, out) = subprocess.getstatusoutput('pacman '+opts)
    pkgs_details = out.split('\n')
    
    # Parse the information obtained by pacman
    lst = []
    name = None
    size = None
    for line in pkgs_details:
        if line.find('Name')!=-1:
            name = line.split()[2] #' '.join(line.split()[3:-1])
        elif line.find('Installed Size')!=-1:
            size = float(' '.join(line.split()[3:-1]))
        elif line.find('Install Date')!=-1:
            date_string = ' '.join(line.split()[3:-1])
            date = time.strptime(date_string,'%a %d %b %Y %H:%M:%S %p')
            lst.append( (name, size, date) )

    debug(str(lst))
    if options.size:
        func = lambda tupl: tupl[1]
    else:
        func = lambda tupl: tupl[2]

    lst_sorted = sorted(lst,key=func)


    for pack in lst_sorted:
        (name, size, date)=pack
        t_string = time.strftime('%a %d %b %Y %H:%M:%S %p', date)

        if options.date:
            print('\033[1;29m'+name+'\033[1;m\t\033[1;32m'+t_string+\
                    '\033[1;m\t\033[1;31m'+str(size)+' KB\033[1;m')
        else:
            print('\033[1;29m'+name+'\033[1;m\t\033[1;31m'+str(size)+\
                    ' KB\033[1;m\t\033[1;32m'+t_string+'\033[1;m')

    
