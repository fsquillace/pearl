#!/usr/bin/python
#
# Author: Filippo Squillace <sqoox85@gmail.com>
#
# Copyright 2010
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

'''This script enables to a deep recursive search of a word in a directory.
'''
__author__ = 'Filippo Squillace'
__date__ = '30/09/2010'
__license__   = 'GPL v3'
__copyright__ = '2010'
__docformat__ = 'restructuredtext en'
__version__ = "0.1.3"
import sys
from optparse import OptionParser
import subprocess
import util.misc
from util.logger import debug, warn

from util.io import deep_search


def __print_results(keyword, entry, list_lines):
    """"""
    if len(list_lines)==0:
        return

    print(20*"-"+entry+20*"-")
    for (num, line) in list_lines:
        line = line.replace(keyword, '\033[1;31m'+keyword+'\033[1;m')
        print(str(num)+" "+line[:len(line)-1].strip())
        pass
    print((40+len(entry))*"-")




if __name__=='__main__':
    usage = "%prog [options] [path] keyword"
    parser = OptionParser(usage=usage)
    parser.add_option("-c","--case-sensitive", dest="case_sensitive",\
            default=False, action="store_true", help="Case sensitive.")
    parser.add_option("-r","--recursive", dest="recursive",\
            default=False, action="store_true", help="Recursive.")
    parser.add_option("-w","--whole-words", dest="whole_words",\
            default=False, action="store_true", help="Whole words.")
    parser.add_option("-p","--pdf", dest="pdf", default=False,\
            action="store_true", help="Search in .pdf files too.")
    options, args = parser.parse_args() # di default prende sys.argv[1:]

    debug('Options: '+str(options))
    debug('Arguments: '+str(args))
    # Check out if the user need a pdf search
    if options.pdf==True:

        if not util.misc.is_pack_installed('poppler-utils'):
            st, out = subprocess.getstatusoutput('pdftotext -v')
            if st!=0:
                sys.stderr('The pdf function may will not work. Check out if poppler package is installed.')

    if len(args)==0 or len(args)>2:
        parser.error("Errore "+sys.argv[0]+" accetta al piu' due argomenti.")
    
    if len(args)==1:
        init_path='.'
        keyword = args[0]
    else:
        init_path=args[0]
        keyword = args[1]
    
    try:
        dict_out = deep_search(init_path, keyword, options.recursive, options.case_sensitive, options.whole_words, options.pdf)

    except KeyboardInterrupt:
        print('Catched ^C command. Now exiting...')

    for entry, list_lines in dict_out.items():
        __print_results(keyword, entry, list_lines)

