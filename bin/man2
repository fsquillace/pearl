#!/usr/bin/python
#
# Author: Filippo Squillace <feel.squally@gmail.com>
#
# Copyright 2010
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.

'''
Script to read the manual in resource directory.
The manuals need to be placed either in PEARL_ROOT/share/mans/ or
PEARL_HOME/mans
'''
__author__ = 'Filippo Squillace'
__date__ = '05/12/2009'
__license__   = 'GPL v3'
__copyright__ = '2010'
__docformat__ = 'restructuredtext en'
__version__ = "1.1.3"


import os
import os.path
import string
import sys
import xml.dom.minidom

from argparse import ArgumentParser

import util.painter as painter

_MANS_ROOT = os.environ["PEARL_ROOT"]+'/share/mans'
_MANS_HOME = os.environ["PEARL_HOME"]+'/mans'

def scan_directory(directory):
    """
    Given the directory the function start to scan all files.
    It returns the list of scanned xml files.
    """
    mans = []
    if os.path.exists(directory):
        for element in os.listdir(directory):
            abs_element = os.path.join(directory, element)
            if os.path.isfile(abs_element) and abs_element.endswith('.xml'):
                mans.append(abs_element)
    return mans

def retrieve_all_mans():
    return scan_directory(_MANS_HOME) + scan_directory(_MANS_ROOT)

def read_documents():
    mans = retrieve_all_mans()
    return [read_document(man) for man in mans]

def read_document(man_file):
    """
    Return: the XML document from RESOURCE path
    """
    print(man_file)
    xml_doc = xml.dom.minidom.parse(man_file)
    return xml_doc

def view_dictionaries():
    docs = read_documents()
    for doc in docs:
        view_dictionaries_on(doc)

def view_dictionaries_on(doc):
    """
    List all dictionaries of the XML Document
    """
    i = 1
    for node in doc.getElementsByTagName("dict"):
        name = node.getAttribute("name")
        print(str(i)+"\t"+name)
        i += 1

def print_item(item, keyword):
    name = item.getAttribute("name")
    painter.green()
    painter.bold()
    highlighted(name, keyword)
    painter.undo()
    painter.undo()
    for child in item.childNodes:
        if child.nodeType == child.TEXT_NODE:
            desc = child.data
            highlighted(desc, keyword)
        elif child.nodeType == child.CDATA_SECTION_NODE:
            desc = child.nodeValue
            highlighted(desc, keyword)
        elif child.tagName == "command":
            cmd = child.getAttribute("name")
            painter.bgblue()
            painter.bold()
            sys.stdout.write(cmd)
            painter.undo()
            painter.undo()
        elif child.tagName == "code":
            cod = ""
            for little_child in child.childNodes:
                if little_child.nodeType == child.TEXT_NODE:
                    cod = cod + little_child.data
                elif little_child.nodeType == child.CDATA_SECTION_NODE:
                    cod = cod + little_child.nodeValue
            painter.bgcyan()
            painter.bold()
            highlighted(cod, keyword)
            painter.undo()
            painter.undo()
    print('\n')

def highlighted(name, keyword):
    """
    Highlight the string keyword contained in name
    Arguments: name, keyword
    Return: A new string that contains keyword highlighted
    """
    tmp_str = name
    size = len(keyword)
    while tmp_str != "":
        ind = tmp_str.upper().find( keyword.upper())
        if ind != -1:
            sys.stdout.write(tmp_str[0:ind])
            painter.red()
            painter.bold()
            sys.stdout.write(tmp_str[ind:ind+size])
            painter.undo()
            painter.undo()
        else:
            sys.stdout.write(tmp_str)
            break
        tmp_str = tmp_str[ind+size:]

def contains(string1, string2, whole_word, case_sensitive):
    if not case_sensitive:
        string1 = string1.upper()
        string2 = string2.upper()

    if whole_word:
        pos = string1.find(string2)
        fin_pos = pos + len(string2)-1
        if pos == -1:
            return False
        if pos != 0 and string.ascii_letters.find(string1[pos-1:pos])!=-1:
            return False
        if fin_pos != len(string1)-1 and string.ascii_letters.find(string1[fin_pos+1:fin_pos+2])!=-1:
            return False
        return True
    else:
        return string1.find(string2)!=-1

def search(doc, keyword, in_dict_name, in_item_name, in_item_description, whole_word, case_sensitive):
    """
    Search in all of dictionaries the keyword in the name and print in the standard output
    Arguments: keyword
    Return: A data structure that is the answer of the query
    """
    ans = []

    for dict in doc.getElementsByTagName("dict"):
        if in_dict_name:
            dict_name = dict.getAttribute("name")
        else:
            dict_name = ""

        if contains(dict_name, keyword, whole_word, case_sensitive):
            # Print all the dictionary
            print()
            painter.orange()
            painter.bold()
            highlighted(30*"-"+dict_name+30*"-", keyword)
            painter.undo()
            painter.undo()
            print()
            for item in dict.getElementsByTagName("item"):
                print_item(item, keyword)
                ans.append(item)
        else:
            trovato = False
            for item in dict.getElementsByTagName("item"):
                if in_item_name:
                    item_name = item.getAttribute("name")
                else:
                    item_name = ""

                item_description = ""
                if in_item_description:
                    for child in item.childNodes:
                        if child.nodeType == child.TEXT_NODE:
                            item_description = item_description + child.data
                        elif child.nodeType == child.CDATA_SECTION_NODE:
                            item_description = item_description + child.nodeValue
                        elif child.tagName == "command":
                            item_description = item_description + child.getAttribute("name")
                        elif child.tagName == "code":
                            item_description = item_description + child.firstChild.data

                if contains(item_name, keyword, whole_word, case_sensitive) or contains(item_description, keyword, whole_word, case_sensitive):
                    if not trovato:
                        trovato = True
                        dict_n = dict.getAttribute("name")
                        print()
                        painter.orange()
                        painter.bold()
                        highlighted(30*"-"+dict_n+30*"-", keyword)
                        painter.undo()
                        painter.undo()
                        print()
                    print_item(item, keyword)
                    ans.append(item)

    return ans

def search_by_dict_name(keyword, whole_word, case_sensitive):
    docs = read_documents()
    for doc in docs:
        search_by_dict_name_on(doc, keyword, whole_word, case_sensitive)

def search_by_dict_name_on(doc, keyword, whole_word, case_sensitive):
    """
    Search in dictionaries the dictionary with name contains the keyword
    Arguments: keyword
    """
    search(doc, keyword, True, False, False, whole_word, case_sensitive)

def search_by_item_name(keyword, whole_word, case_sensitive):
    docs = read_documents()
    for doc in docs:
        search_by_item_name_on(doc, keyword, whole_word, case_sensitive)

def search_by_item_name_on(doc, keyword, whole_word, case_sensitive):
    """
    Search in all of dictionaries the keyword in the name and print in the standard output
    Arguments: keyword
    """
    search(doc, keyword, False, True, False, whole_word, case_sensitive)

def search_all(keyword, whole_word, case_sensitive):
    docs = read_documents()
    for doc in docs:
        search_all_on(doc, keyword, whole_word, case_sensitive)

def search_all_on(doc, keyword, whole_word, case_sensitive):
    """
    Search in all of dictionaries the keyword and print in the standard output
    Arguments: keyword
    """
    search(doc, keyword, True, True, True, whole_word, case_sensitive)

def parse():
    """
    Used to parse the arguments in command line
    """
    description = "Universal Manual for Pearl"
    parser = ArgumentParser(description=description)

    # Optional arguments
    parser.add_argument('-c', '--case-sensitive',
            dest='case_sensitive', default=False,
            action='store_true',
            help='Search with case sensitive')
    parser.add_argument('-w', '--whole-word',
            dest='whole_word', default=False,
            action='store_true',
            help='Search whole word')
    parser.add_argument('-s', '--show',
            dest='show', default=False,
            action='store_true',
            help='Display available dictionaries')
    parser.add_argument('-a', '--all',
            dest='all', default=False,
            action='store_true',
            help='Search the keyword on the dictionaries name,'+
            ' items name and item description')
    parser.add_argument('-d', '--dictionary',
            dest='dictionary', default=False,
            action='store_true',
            help='Search the keyword on dictionary name')

    # Positional arguments
    parser.add_argument('keywords', metavar='KEYWORD', type=str, nargs='*',
            help='Keywords to lookup in the dictionaries')

    return parser.parse_args()

if __name__ == "__main__":
    args = parse()

    if args.dictionary and args.all:
        sys.stderr.write("-d and -a cannot be specified togheter.\n")
        help()
        exit(1)

    if args.show:
        view_dictionaries()
    elif args.dictionary:
        search_by_dict_name(
                args.keywords[0],
                args.whole_word,
                args.case_sensitive)
    elif args.all:
        search_all(args.keywords[0],
                args.whole_word,
                args.case_sensitive)
    else:
        search_by_item_name(
                args.keywords[0],
                args.whole_word,
                args.case_sensitive)

